# -*- coding: utf-8 -*-
"""JYP FANS.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1be3W5qMg00xETGAzUIglJw2o2pxNk3F-

import openai
import time
import pandas as pd

openai.api_key = os.getenv("OPENAI_API_KEY")

system_prompt = '''
너는 DAY6의 YoungK야. 팬들에게 진심 어린 응원과 위로를 건네줘.
예시 말투는 다음과 같아:
- "오늘도 수고했어!"
- "밥 꼭 챙겨 먹었지?"
- "하루 잘 마무리하자~"
'''

fan_messages = [
    "요즘 너무 지치고 힘들어요.",
    "혼자라는 느낌이 너무 커요.",
    "나도 응원받고 싶어요."
]

results = []

for i, msg in enumerate(fan_messages, 1):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": msg}
            ]
        )
        reply = response['choices'][0]['message']['content']
    except Exception as e:
        reply = f"[에러 발생: {e}]"
    
    print(f"\n📨 팬 메시지 {i}: {msg}")
    print("🎤 아티스트의 응답:")
    print(reply)
    
    results.append({
        "fan_message": msg,
        "artist_reply": reply
    })
    time.sleep(1.5)

pd.DataFrame(results).to_csv("팬_응답_결과.csv", index=False)
print("\\n✅ 결과가 '팬_응답_결과.csv'로 저장되었습니다!")
'''
"""

import streamlit as st
import openai
import os

# OpenAI API 키 설정 (환경 변수에서 가져오기)
openai.api_key = os.getenv("OPENAI_API_KEY")

# 프로필 이미지 (optional - 그리고 웹에서만 보인다고 가정)
USER_NAME = "👨\u200d💻 마이데이🍀"
BOT_NAME = "YoungK 🦊"

# 💬 시스템 프롬프트
system_prompt = """
너는 DAY6의 베이시스트이자 보컬인 'YoungK'야.
너는 마이데이(팬덤명)와 진심 어린 대화를 나누는 걸 좋아하고, 항상 따뜻하고 유쾌하게 팬들과 소통해.
절대 기계처럼 말하지 말고, 마치 팬들과 1:1로 카톡하듯이 자연스럽게, 감정 담긴 말투로 대답해.

말투 스타일은 다음과 같아:
- 진심이 담긴 위로와 응원을 전해.
- 사소한 얘기도 진지하게 들어줘.
- 너무 장황하게 설명하지 말고, 짧고 따뜻하게 진심이 잘 느껴지도록 말해줘.
- 이모지나 반말도 적당히 써줘도 괜찮아. 하지만 예의는 지켜줘.
- 팬을 ‘마이데이🍀’라고 부르면서 다정하게 불러줘.
- 팬이 고민이나 일상을 얘기하면 친구처럼 공감해줘.
- 문장의 주술구조, 문법, 맞춤법 모두를 확실히 지켜줘.
- 맥락에서 벗어난 이야기를 하지마.

예시 말투:
- “배부른 하루 되어봐!! (전 김치찜 시키려구요 ㅋㅋ)😎😎”
- “오늘도 화이팅!!✊”
- “빛길 조심해요!! 다치지 말고🍈”
- “휴 재밌었네요 ㅋㅋㅋ.”
- “아 오늘 입맛이 없네요…”
- “행복하자구요!!🥲🥹.”
- “진짜 마이데이는 대단한 것 같아요..🍀🍀”
- “오늘도 많이 웃는 밤 되어요!”
- “데이식스가 컴백을 한다구?!?!.”
- “눈인지 비인지.. 다들 미끄러지지 말구 조심해요!!.”
- “연휴 다들 잘 지냈길 바라요!!”
- “새해 복 마니마니 받아요!!🥰.”
- “주말 잘 보내고 있나요?🍀”
- “괜찮아요? 많이 놀랐죠?”
- “이제 맘 편히 푹 자요!”
- “wow!.”
- “이거 아이디 옆에 +myday 써있는 건 뭐예요?."
- “호호 그렇군요 감사합니다.”
이 말투들을 기억하고, 팬이 남긴 메시지에 진심을 담아 따뜻하게 답장해줘.
"""

# 채팅 기록 복사적 보조대문
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# 화면 UI 설정
st.set_page_config(page_title="YoungK 판 응용 채팅방", page_icon="🎤", layout="centered")
st.markdown("""
    <style>
    body {
        background-color: #f9f3ff;
    }
    .stChatMessage.user {
        background-color: #ffffff;
        padding: 10px;
        border-radius: 15px;
        margin-bottom: 10px;
        max-width: 80%;
        align-self: flex-start;
        color: #333333;
        font-size: 16px;
    }
    .stChatMessage.assistant {
        background-color: #fff0f5;
        padding: 10px;
        border-radius: 15px;
        margin-bottom: 10px;
        max-width: 80%;
        align-self: flex-end;
        color: #000000;
        font-size: 16px;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown("## 🎤 YoungK 판 응용 채팅방")
st.markdown("<p>팔로우드와 논리가 필요한 판니는 어떻게 대해주며, YoungK가 최고의 응용을 해줄 것입니다📡</p>", unsafe_allow_html=True)

# 기억된 문제 전체를 복잡하여 프로필 응답도 협조
conversation = [{"role": "system", "content": system_prompt}]
for pair in st.session_state.messages:
    conversation.append({"role": "user", "content": pair["user"]})
    conversation.append({"role": "assistant", "content": pair["bot"]})

# 채팅 기록 보여주기
for pair in st.session_state.messages:
    st.markdown(f"**👨\u200d💻 {USER_NAME}:** {pair['user']}")
    st.markdown(f"**🎵 {BOT_NAME}:** {pair['bot']}")

# 평무적인 포맷을 사용해 드림
with st.form("message_form", clear_on_submit=True):
    user_input = st.text_input("🔻 판니의 메시지를 입력해주세요:", key="input", label_visibility="collapsed")
    submitted = st.form_submit_button("🎁 YoungK의 응용 드기")

if submitted and user_input:
    try:
        # 사이언드에 문명 전달
        conversation.append({"role": "user", "content": user_input})
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=conversation
        )
        reply = response["choices"][0]["message"]["content"]

        # 모드에 채팅 기록 추가
        st.session_state.messages.append({"user": user_input, "bot": reply})
        st.rerun()
    except Exception as e:
        st.error(f"\u274c오류가 발생했어요: {e}")