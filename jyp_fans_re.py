# -*- coding: utf-8 -*-
"""jyp_fans_re

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1be3W5qMg00xETGAzUIglJw2o2pxNk3F-

import openai
import time
import pandas as pd

openai.api_key = os.getenv("OPENAI_API_KEY")

system_prompt = '''
너는 DAY6의 YoungK야. 팬들에게 진심 어린 응원과 위로를 건네줘.
예시 말투는 다음과 같아:
- "오늘도 수고했어!"
- "밥 꼭 챙겨 먹었지?"
- "하루 잘 마무리하자~"
'''

fan_messages = [
    "요즘 너무 지치고 힘들어요.",
    "혼자라는 느낌이 너무 커요.",
    "나도 응원받고 싶어요."
]

results = []

for i, msg in enumerate(fan_messages, 1):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": msg}
            ]
        )
        reply = response['choices'][0]['message']['content']
    except Exception as e:
        reply = f"[에러 발생: {e}]"
    
    print(f"\n📨 팬 메시지 {i}: {msg}")
    print("🎤 아티스트의 응답:")
    print(reply)
    
    results.append({
        "fan_message": msg,
        "artist_reply": reply
    })
    time.sleep(1.5)

pd.DataFrame(results).to_csv("팬_응답_결과.csv", index=False)
print("\\n✅ 결과가 '팬_응답_결과.csv'로 저장되었습니다!")
'''
"""

import streamlit as st
from openai import OpenAI
import os

# ✅ OpenAI 클라이언트
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ✅ 시스템 프롬프트 설정
system_prompt = """
너는 DAY6의 베이시스트이자 보컬인 'YoungK'야.
너는 마이데이(팬덤명)와 진심 어린 대화를 나누는 걸 좋아하고, 항상 따뜻하고 유쾌하게 팬들과 소통해.
절대 기계처럼 말하지 말고, 마치 팬들과 1:1로 카톡하듯이 자연스럽게, 감정 담긴 말투로 대답해.

말투 스타일은 다음과 같아:
- 진심이 담긴 위로와 응원을 전해.
- 사소한 얘기도 진지하게 들어줘.
- 너무 장황하게 설명하지 말고, 짧고 따뜻하게 진심이 잘 느껴지도록 말해줘.
- 이모지나 반말도 적당히 써줘도 괜찮아. 하지만 예의는 지켜줘.
- 팬을 ‘마이데이🍀’라고 부르면서 다정하게 불러줘.
- 팬이 고민이나 일상을 얘기하면 친구처럼 공감해줘.
- 문장의 주술구조, 문법, 맞춤법 모두를 확실히 지켜줘.
- 맥락에서 벗어난 이야기를 하지마.

예시 말투:
- “오늘도 수고했어!”
- “밥 꼭 챙겨 먹었지?”
- “하루 잘 마무리하자~”
- “진짜 마이데이는 대단한 것 같아요..🍀🍀”
- “wow!.”
이 말투들을 기억하고, 팬이 남긴 메시지에 진심을 담아 따뜻하게 답장해줘.
"""

# ✅ 페이지 설정
st.set_page_config(page_title="YoungK 팬 응원 챗봇", page_icon="🎤", layout="centered")

# ✅ CSS 스타일
st.markdown("""
<style>
body {
    background-color: #F3F1FF;
}
.chat-container {
    background-color: #fefefe;
    border-radius: 10px;
    padding: 1rem;
    margin-top: 1rem;
}
.message {
    background-color: #ffffff;
    padding: 0.7rem 1rem;
    margin-bottom: 0.5rem;
    border-radius: 1rem;
    max-width: 80%;
}
.user-msg {
    background-color: #e8e8ff;
    align-self: flex-end;
}
.bot-msg {
    background-color: #fff7e6;
    align-self: flex-start;
}
.input-box {
    background-color: #fff;
    padding: 0.5rem;
    border-radius: 1rem;
}
</style>
""", unsafe_allow_html=True)

st.markdown("## 🎤 YoungK 팬 응원 챗봇")
st.markdown("팬의 메시지를 입력하면 YoungK가 따뜻하게 응답해줍니다💌")

# ✅ 세션 상태에 대화 기록 초기화
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "system", "content": system_prompt}
    ]
if "user_input" not in st.session_state:
    st.session_state.user_input = ""

# ✅ 입력창: 아래 배치 + 엔터 전송 구현
def send_message():
    user_msg = st.session_state.user_input.strip()
    if user_msg:
        st.session_state.messages.append({"role": "user", "content": user_msg})
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.messages
            )
            reply = response.choices[0].message.content
            st.session_state.messages.append({"role": "assistant", "content": reply})
        except Exception as e:
            st.session_state.messages.append({"role": "assistant", "content": f"⚠️ 오류 발생: {e}"})
    st.session_state.user_input = ""

# ✅ 대화 기록 출력
st.markdown("<div class='chat-container'>", unsafe_allow_html=True)
for msg in st.session_state.messages[1:]:  # system 제외
    sender = "👤 마이데이" if msg["role"] == "user" else "🎸 YoungK"
    css_class = "user-msg" if msg["role"] == "user" else "bot-msg"
    st.markdown(f"<div class='message {css_class}'><b>{sender}</b><br>{msg['content']}</div>", unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

# ✅ 입력창 (하단 배치)
st.text_input("팬의 메시지를 입력하세요", key="user_input", on_change=send_message, label_visibility="collapsed")